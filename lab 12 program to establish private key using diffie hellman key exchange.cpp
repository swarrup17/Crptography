#include <iostream>
#include <cmath>
using namespace std;
// Function to calculate (base^exp) % mod
int modExp(int base, int exp, int mod) {
    int result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1)  // If exp is odd, multiply base with result
            result = (result * base) % mod;
        exp = exp >> 1;    // exp = exp / 2
        base = (base * base) % mod;  // base = base^2 % mod
    }
    return result;
}
// Function to perform Diffie-Hellman key exchange
void diffieHellman(int p, int g, int private_key) {
    // Calculate public key
    int public_key = modExp(g, private_key, p);
    cout << "Public Key generated by Alice: " << public_key << endl;

    // Simulating sending public_key to Bob and receiving Bob's public_key
    // Let's assume Bob's public key is 4 (hardcoded for simplicity)
    int bob_public_key = 4;

    // Calculate shared secret
    int shared_secret = modExp(bob_public_key, private_key, p);
    cout << "Shared Secret established by Alice: " << shared_secret << endl;
}
int main() {
    int p, g, alice_private_key;
    // Input prime number (p)
    cout << "Enter prime number (p): ";
    cin >> p;
    // Input base value (g)
    cout << "Enter base value (g)  which should be primitive root of p: ";
    cin >> g;
    // Input Alice's private key
    cout << "Enter Alice's private key: ";
    cin >> alice_private_key;
    cout << "\nPrime Number (p): " << p << endl;
    cout << "Base Value (g): " << g << endl;
    cout << "Alice's Private Key: " << alice_private_key << endl;
    diffieHellman(p, g, alice_private_key);
    return 0;
}

